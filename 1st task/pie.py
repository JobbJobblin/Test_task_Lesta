# Вопрос №1
#
# На языке Python написать алгоритм (функцию) определения четности целого числа, который будет аналогичен нижеприведенному по функциональности, но отличен по своей сути. Объяснить плюсы и минусы обеих реализаций.

# Импорт стандартной библиотеки timeit для объективного измерения эффективности обоих вариантов.
import timeit

# 1 вариант. 
# + Проще и очевиднее быть уже не может. Это, буквально, то, что следует после Print("Hello, World") при изучении python. 
# + Работает.
# 
# - Спорный минус, но, говорят, CamelCase читается хуже, чем snake-case. Данный минус актуален, если в названии функции у вас 10+ слов. 
def isEven(value):

    return value % 2 == 0

# 2 вариант.
# + Использует побитовое И. Теоретически, это быстрее. 
# + Тоже работает.
# + Snake-case делает наименование функции более читабельным. 
#
# - Второе, что приходит на ум, когда просят найти чётное число. Не первое. 
def is_Even_More_Even(value):

    return value & 1 == 0

#Число, с которым мы будем проводить испытание.
number = 156841

#Создаём замер для 1 варианта.
time_isEven = timeit.timeit("isEven({})".format(number), setup="from __main__ import isEven", number=100000)

#Cоздаём замер для 2 варианта.
time_is_Even_More_Even = timeit.timeit("is_Even_More_Even({})".format(number), setup="from __main__ import is_Even_More_Even", number=100000)

#"Озвучиваем" результат 1 замера.
print(f"Время выполнения 1 варианта {time_isEven:.6f}")

#"Озвучиваем" результат 2 замера.
print(f"Время выполнения 1 варианта {time_is_Even_More_Even:.6f}")

# Итог: 2 вариант, в среднем, оказывается быстрее.
# P.s. про snake-case - это не настоящий минус и плюс. Это вопрос вкуса.